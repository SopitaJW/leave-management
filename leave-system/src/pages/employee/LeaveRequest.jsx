import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const API_URL = 'http://localhost:5000/api';
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ EmployeeID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
const CURRENT_EMPLOYEE_ID = 1004; 

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ)
const leaveTypeColors = {
  '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢': '#ff6b6b',
  '‡∏•‡∏≤‡∏Å‡∏¥‡∏à': '#4ecdc4',
  '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô': '#45b7d1',
  '‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î': '#f9ca24',
};

const LeaveRequest = () => {
  const [leaveSummary, setLeaveSummary] = useState([]);
  const [leaveHistory, setLeaveHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  const [leaveForm, setLeaveForm] = useState({
    startDate: '',
    endDate: '',
    reason: '',
    leaveTypeId: '', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô leaveTypeId
  });

  const [selectedLeaveTypeFilter, setSelectedLeaveTypeFilter] = useState('all');

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchData = async () => {
    setLoading(true);
    try {
      const summaryRes = await axios.get(`${API_URL}/summary/${CURRENT_EMPLOYEE_ID}`);
      setLeaveSummary(summaryRes.data.data);
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ leaveTypeId ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      if (summaryRes.data.data.length > 0) {
        setLeaveForm(prev => ({ ...prev, leaveTypeId: summaryRes.data.data[0].id }));
      }
      
      const historyRes = await axios.get(`${API_URL}/history/${CURRENT_EMPLOYEE_ID}`);
      setLeaveHistory(historyRes.data.data);

    } catch (error) {
      console.error("Error fetching data:", error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const calculateDays = (start, end) => {
    if (!start || !end) return 0;
    const startDate = new Date(start);
    const endDate = new Date(end);
    if (endDate < startDate) return 0;
    const diffTime = Math.abs(endDate - startDate);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setLeaveForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!leaveForm.startDate || !leaveForm.endDate || !leaveForm.reason || !leaveForm.leaveTypeId) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const newRequest = {
      ...leaveForm,
      employeeId: CURRENT_EMPLOYEE_ID,
    };

    try {
      await axios.post(`${API_URL}/request`, newRequest);
      alert('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
      fetchData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      // Reset form
      setLeaveForm({
        startDate: '',
        endDate: '',
        reason: '',
        leaveTypeId: leaveSummary.length > 0 ? leaveSummary[0].id : '',
      });
    } catch (error) {
      console.error("Error submitting request:", error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
    }
  };

  const filteredHistory = selectedLeaveTypeFilter === 'all'
    ? leaveHistory
    : leaveHistory.filter(leave => leave.leaveType === selectedLeaveTypeFilter);

  if (loading) return <div className="text-center p-8">Loading...</div>;

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <header className="mb-8">
          <p className="text-gray-600 mt-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </header>

        {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏•‡∏≤ */}
        <section className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏≤</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {leaveSummary.map(summary => {
              const percentage = (summary.used / summary.quota) * 100;
              const color = leaveTypeColors[summary.name] || '#ccc';
              return (
                <div key={summary.id} className="bg-white rounded-lg shadow-md p-6 border-l-4" style={{ borderLeftColor: color }}>
                  <div className="flex justify-between items-start mb-4">
                    <h3 className="text-lg font-semibold text-gray-800">{summary.name}</h3>
                    <span className="text-xl font-bold" style={{ color: color }}>{summary.remaining}/{summary.quota}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5 mb-4">
                    <div className="h-2.5 rounded-full" style={{ width: `${percentage}%`, backgroundColor: color }}></div>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: {summary.used} ‡∏ß‡∏±‡∏ô</span>
                    <span>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {summary.remaining} ‡∏ß‡∏±‡∏ô</span>
                  </div>
                </div>
              );
            })}
          </div>
        </section>

        {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤ */}
        <section className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">‚úçÔ∏è ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤</h2>
            <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-md p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ *</label>
                        <input type="date" name="startDate" value={leaveForm.startDate} onChange={handleInputChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg" required/>
                    </div>
                    {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î *</label>
                        <input type="date" name="endDate" value={leaveForm.endDate} onChange={handleInputChange} min={leaveForm.startDate} className="w-full px-4 py-2 border border-gray-300 rounded-lg" required/>
                    </div>
                    {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ *</label>
                        <select name="leaveTypeId" value={leaveForm.leaveTypeId} onChange={handleInputChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg" required>
                            {leaveSummary.map(type => (
                                <option key={type.id} value={type.id}>{type.name}</option>
                            ))}
                        </select>
                    </div>
                    {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô</label>
                        <input type="text" value={`${calculateDays(leaveForm.startDate, leaveForm.endDate)} ‡∏ß‡∏±‡∏ô`} disabled className="w-full px-4 py-2 bg-gray-100 border border-gray-300 rounded-lg"/>
                    </div>
                    {/* ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ */}
                    <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ *</label>
                        <textarea name="reason" value={leaveForm.reason} onChange={handleInputChange} rows="3" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤..." className="w-full px-4 py-2 border border-gray-300 rounded-lg" required></textarea>
                    </div>
                </div>
                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á */}
                <div className="mt-6">
                    <button type="submit" className="w-full bg-sky-400 text-black py-3 px-6 rounded-lg font-medium hover:bg-sky-500 transition-colors shadow-md">üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤</button>
                </div>
            </form>
        </section>

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤ */}
        <section>
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-900">üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤</h2>
            <select value={selectedLeaveTypeFilter} onChange={(e) => setSelectedLeaveTypeFilter(e.target.value)} className="px-4 py-2 border border-gray-300 rounded-lg">
              <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              {leaveSummary.map(type => (<option key={type.id} value={type.name}>{type.name}</option>))}
            </select>
          </div>
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredHistory.map((leave, index) => (
                    <tr key={leave.id || index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap"><span className="px-3 py-1 text-xs font-medium rounded-full text-white" style={{ backgroundColor: leaveTypeColors[leave.leaveType] || '#ccc' }}>{leave.leaveType}</span></td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">{new Date(leave.StartDate).toLocaleDateString('th-TH')}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">{new Date(leave.EndDate).toLocaleDateString('th-TH')}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">{leave.days} ‡∏ß‡∏±‡∏ô</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 text-xs font-medium rounded-full ${
                          leave.Status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' ? 'bg-green-100 text-green-800' : 
                          leave.Status === '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'}`}>{leave.Status}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </section>
        
        <div className="mt-8">
            <Link to="/employee/dashboard" className="inline-flex items-center text-viridian-600 hover:text-viridian-700 font-medium">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link>
        </div>
      </div>
    </div>
  );
};

export default LeaveRequest;